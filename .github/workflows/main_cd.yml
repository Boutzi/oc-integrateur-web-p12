name: Merge dev into main with version bump

on:
  pull_request:
    branches: ["main"]

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Ensures the repo is checked out before running any Git commands.

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1

      - name: Git config
        run: |
          git config --local user.name "boutzi"
          git config --local user.email "joe@arkaans.com"
          git pull

      - name: Increment version (package.json)
        id: increment_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          echo "Version actuelle: $CURRENT_VERSION"

          if [[ "${{ github.event.head_commit.message }}" == *"major"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ github.event.head_commit.message }}" == *"feat"* ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ github.event.head_commit.message }}" == *"fix"* ]]; then
            patch=$((patch + 1))
          else
            echo "Aucun incrément de version spécifié. Aucune modification."
            exit 0
          fi

          NEW_VERSION="$major.$minor.$patch"
          echo "Nouvelle version: $NEW_VERSION"

          jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > tmp.$$.json && mv tmp.$$.json package.json

          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump to dev
        run: |
          git add package.json
          git commit -m "Bump version to ${{ env.new_version }}" || echo "Aucune modification à valider."
          git push origin dev || echo "Échec du push, vérifiez les permissions."

      - name: Merge dev into main
        run: |
          git fetch origin
          git checkout main
          git merge dev --no-ff || echo "Conflict detected. Please resolve manually."
          git push origin main || echo "Échec du push, vérifiez les permissions."
